// This is the OpenQasm 2.0 grammar
start: "OPENQASM" "2.0" ";" program

program: statement+

?statement: decl
    | _gatedecl "{" gbody "}" -> gatedef
    | "opaque" ID ["(" [idlist] ")"] idlist ";" -> opaque
    | qop
    | "if" "(" ID "==" NNINTEGER ")" qop -> ifstatement
    | "include" FILENAME ";" -> include
    | "barrier" args ";" -> barrier

gbody: gop*

decl: "qreg" ID "[" NNINTEGER "]" ";" -> qregdecl
    | "creg" ID "[" NNINTEGER "]" ";" -> cregdecl

// A gate declaration has an optional list of parameters (ids)
_gatedecl: "gate" ID ["(" [idlist] ")"] idlist

// Note that only idlist is allowed within a gate declaration
?gop: standardgate
    | "barrier" idlist ";" -> gbarrier
    | ID ["(" [explist] ")"] idlist ";" -> gcall


standardgate: "U" "(" explist ")" argument ";" -> ugate
    | "CX" argument "," argument ";" -> cxgate

?qop: standardgate
    | "measure" argument "->" argument ";" -> measure
    | "reset" argument ";" -> reset
    | ID ["(" [explist] ")"] args ";" -> qcall

idlist: ID ("," ID)*

// superset of idlist, also allowing optional array indices
args: (argument) ("," (argument))*

argument: ID ["[" NNINTEGER "]"]

explist: exp ("," exp)*

// We split up expression by their order of associativity (lowest-to-highest)
?exp: product
    | exp "+" product -> add
    | exp "-" product -> sub

?product: exponent
    | product "*" exponent -> mul
    | product "/" exponent -> div

?exponent: atom
    | exponent "^" atom -> exponent

?atom: REAL
    | NNINTEGER
    | "pi" -> pi
    | ID
    | "-" atom -> neg
    | "(" exp ")"
    | MATHFUN "(" exp ")" -> mathfun

MATHFUN: "sin"
    | "cos"
    | "tan"
    | "exp"
    | "ln"
    | "sqrt"



%import common.DIGIT
%import common.FLOAT -> REAL

NNDIGIT : "1".."9"
NNINTEGER : "0"
    | NNDIGIT (DIGIT)*

// Since only filenames are quoted by '"', we can capture all groups between them as a filename.
%import common.ESCAPED_STRING -> FILENAME
ID: /[a-z][A-Za-z0-9]*/

COMMENT: /\/\/.*/
%ignore COMMENT

%import common.WS
%ignore WS
